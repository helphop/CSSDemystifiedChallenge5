// --------------------------------

// How to create custom utility classes

// --------------------------------

// ðŸ‘‡ your custom utility class
// .my-util-class {
//   property: value;
// }

// ðŸ‘‡ (optional) create responsive variations - edit only [my-util-class, property, value]
// @each $breakpoint, $value in $breakpoints {
//   @include breakpoint(#{$breakpoint}) {
//     .my-util-class\@#{$breakpoint} {
//       property: value;
//     }
//   }
// }

.text--thin {
  font-weight: 300;
}

.flow-content > * + * {
  margin-top: var(--space-unit-rem);
}

.flow-content-xsmall > * + * {
  margin-top: calc(0.5 * var(--space-unit-rem));
}

.flow-content-small > * + * {
  margin-top: calc(0.75 * var(--space-unit-rem));
}

.flow-content-md > * + * {
    margin-top: calc(1.25 * var(--space-unit-rem));
}

.flow-content-large > * + * {
  margin-top: calc(2 * var(--space-unit-rem));
}

.flow-content-xlarge > * + * {
  margin-top: calc(3.25 * var(--space-unit-rem));;
}



.radius-xl { border-radius: var(--radius-xl); }
.radius-xxl { border-radius: var(--radius-xxl); }
.radius-xxxl { border-radius: var(--radius-xxxl); }

.bg-darker {
  background-color: var(--color-white-dark);
}

.bg-white-dark {
  background-color: var(--color-white-dark);
}

.justify-self-end { justify-self: end;}

.grayline-bottom {
    &:after {
    content: "";
    position: absolute;
    display: block;
    --default-border: 2px;
    border-top: var(--border, var(--default-border)) solid var(--line-color, var(--color-white-dark));
    border-bottom: var(--border, var(--default-border)) solid var(--line-color, var(--color-white-dark));
    border-radius: var(--border, var(--default-border));
    width: 100%;
    bottom: 0;
  }
}

//This is here as a reminder that we need the 100% width on the first part so it works in a grid or flex container!!
  // [class*="aspect-ratio"] {
  //   --aspect-ratio: 16/9;
  //   position: relative;
  //   height: 0;
  //   width: 100%; // <-important for grid containers and flex containers
  //   padding-bottom: calc(100%/(var(--aspect-ratio)));
  //   > * {
  //     position: absolute;
  //     top: 0;
  //     left: 0;
  //     width: 100%;
  //     height: 100%;
  //     object-fit: cover;
  //   }
  // }